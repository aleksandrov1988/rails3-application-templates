# >---------------------------------------------------------------------------<
#
#            _____       _ _   __          ___                  _
#           |  __ \     (_) |  \ \        / (_)                | |
#           | |__) |__ _ _| |___\ \  /\  / / _ ______ _ _ __ __| |
#           |  _  // _` | | / __|\ \/  \/ / | |_  / _` | '__/ _` |
#           | | \ \ (_| | | \__ \ \  /\  /  | |/ / (_| | | | (_| |
#           |_|  \_\__,_|_|_|___/  \/  \/   |_/___\__,_|_|  \__,_|
#
#   This template was generated by rails_apps_composer, a custom version of
#   RailsWizard, the application template builder. For more information, see:
#   https://github.com/RailsApps/rails_apps_composer/
#
# >---------------------------------------------------------------------------<

# >----------------------------[ Initial Setup ]------------------------------<

initializer 'generators.rb', <<-RUBY
Rails.application.config.generators do |g|
end
RUBY

@recipes = ["aai10_all"]

def recipes; @recipes end
def recipe?(name); @recipes.include?(name) end

def say_custom(tag, text); say "\033[1m\033[36m" + tag.to_s.rjust(10) + "\033[0m" + "  #{text}" end
def say_recipe(name); say "\033[1m\033[36m" + "recipe".rjust(10) + "\033[0m" + "  Running #{name} recipe..." end
def say_wizard(text); say_custom(@current_recipe || 'wizard', text) end

def ask_wizard(question)
  ask "\033[1m\033[30m\033[46m" + (@current_recipe || "prompt").rjust(10) + "\033[0m\033[36m" + "  #{question}\033[0m"
end

def yes_wizard?(question)
  answer = ask_wizard(question + " \033[33m(y/n)\033[0m")
  case answer.downcase
    when "yes", "y"
      true
    when "no", "n"
      false
    else
      yes_wizard?(question)
  end
end

def no_wizard?(question); !yes_wizard?(question) end

def multiple_choice(question, choices)
  say_custom('question', question)
  values = {}
  choices.each_with_index do |choice,i| 
    values[(i + 1).to_s] = choice[1]
    say_custom (i + 1).to_s + ')', choice[0]
  end
  answer = ask_wizard("Enter your selection:") while !values.keys.include?(answer)
  values[answer]
end

@current_recipe = nil
@configs = {}

@after_blocks = []
def after_bundler(&block); @after_blocks << [@current_recipe, block]; end
@after_everything_blocks = []
def after_everything(&block); @after_everything_blocks << [@current_recipe, block]; end
@before_configs = {}
def before_config(&block); @before_configs[@current_recipe] = block; end


# this application template only supports Rails version 3.1 and newer
case Rails::VERSION::MAJOR.to_s
when "3"
  case Rails::VERSION::MINOR.to_s
  when "2"
    say_wizard "You are using Rails version #{Rails::VERSION::STRING}."
  when "1"
    say_wizard "You are using Rails version #{Rails::VERSION::STRING}."
  when "0"
    say_wizard "You are using Rails version #{Rails::VERSION::STRING} which is not supported. Try 3.1 or newer."
    raise StandardError.new "Rails #{Rails::VERSION::STRING} is not supported. Try 3.1 or newer."
  else
    say_wizard "You are using Rails version #{Rails::VERSION::STRING}."
  end
else
  say_wizard "You are using Rails version #{Rails::VERSION::STRING} which is not supported. Try 3.1 or newer."
  raise StandardError.new "Rails #{Rails::VERSION::STRING} is not supported. Try 3.1 or newer."
end

say_wizard "Checking configuration. Please confirm your preferences."

# >---------------------------[ Autoload Modules/Classes ]-----------------------------<

inject_into_file 'config/application.rb', :after => 'config.autoload_paths += %W(#{config.root}/extras)' do <<-'RUBY'

    config.autoload_paths += %W(#{config.root}/lib)
RUBY
end

# >---------------------------------[ Recipes ]----------------------------------<


# >-------------------------------[ aai10_all ]-------------------------------<

@current_recipe = "aai10_all"
@before_configs["aai10_all"].call if @before_configs["aai10_all"]
say_recipe 'aai10_all'

config = {}
config['database'] = multiple_choice("Which database are you using?", [["MySQL", "mysql"], ["Oracle", "oracle"], ["PostgreSQL", "postgresql"], ["SQLite", "sqlite3"]]) if true && true unless config.key?('database')
config['auto_create'] = yes_wizard?("Automatically create database with default configuration?") if true && true unless config.key?('auto_create')
config['username'] = ask_wizard("Database username:") if true && true unless config.key?('username')
config['password'] = ask_wizard("Database password:") if true && true unless config.key?('password')
config['layout'] = multiple_choice("Which layout type do you prefer?", [["Fixed", "fixed"], ["Fluid", "fluid"]]) if true && true unless config.key?('layout')
config['errbit'] = yes_wizard?("User errbit exceptions catcher?") if true && true unless config.key?('errbit')
config['haml'] = yes_wizard?("Would you like to use Haml instead of ERB?") if true && true unless config.key?('haml')
config['logins'] = ask_wizard("User logins: ") if true && true unless config.key?('logins')
@configs[@current_recipe] = config

###MSIU GEMS
say_wizard "source gems.msiu.ru"
inject_into_file 'Gemfile', :after => "source 'https://rubygems.org'\n" do
  "source 'http://msiu:msiu@gems.msiu.ru'\n"
end


###DATABASE
if config['database']
  say_wizard "Configuring '#{config['database']}' database settings..."
  old_gem = gem_for_database
  @options = @options.dup.merge(:database => config['database'])
  gsub_file 'Gemfile', "gem '#{old_gem}'", "gem '#{gem_for_database}'"
  template "config/databases/#{@options[:database]}.yml", "config/database.yml.new"
  run 'mv config/database.yml.new config/database.yml'
  unless config['username'].blank?
    gsub_file "config/database.yml", /username:(.*)$/, "username: #{config['username']}"
  end
  unless config['password'].blank?
    gsub_file "config/database.yml", /password:(.*)$/, "password: #{config['password']}"
  end
end

###HAML
if config['haml']
  say_wizard 'haml'
  gem 'haml'
  gem 'haml-rails'
end


###BOOTSTRAP

gem 'twitter-bootstrap-rails', :group => :assets
# please install gem 'therubyracer' to use Less
gem 'therubyracer', :group => :assets, :platform => :ruby


###CAS
gem 'rubycas-client-msiu', '>= 1.1'

###RSPEC
gem 'rspec', :group => [:development, :test]
gem 'rspec-rails', :group => [:development, :test]
gem 'factory_girl', :group => [:development, :test]


###ERRBIT
if config['errbit']
  gem 'airbrake'
  get 'https://raw.github.com/aleksandrov1988/rails3-application-templates/master/files/config/initializers/errbit_example.rb', 'config/initializers/errbit.rb'
end


###LOCALE
gem 'russian'

###LOGINS
logins=config['logins'].split(/[\s,]+/)
if logins.any?
  append_file 'db/seeds.rb', logins.map { |l| "User.create(:login=>'#{l}')" }.join("\n")
end


after_bundler do

  ###DATABASE
  say_wizard "rake db:create"
  rake "db:create" if config['auto_create']

  ###RSPEC
  generate 'rspec:install'

  ###BOOTSTRAP
  say_wizard "bootstrap:install"
  generate 'bootstrap:install'
  layout_type=config['layout']
  extname= config['haml'] ? 'haml' : 'erb'
  remove_file 'app/views/layouts/application.html.erb'
  remove_file 'app/views/layouts/application.html.haml'
  get 'https://raw.github.com/aleksandrov1988/rails3-application-templates/master/files/helpers/basic_helper.rb', 'app/helpers/basic_helper.rb'
  gsub_file 'app/helpers/basic_helper.rb', /from\s*\=\s*2012/, "from = #{Time.now.year}"
  get "https://raw.github.com/aleksandrov1988/rails3-application-templates/master/files/views/layouts/application_#{layout_type}.html.#{extname}", "app/views/layouts/application.html.#{extname}"
  get "https://raw.github.com/aleksandrov1988/rails3-application-templates/master/files/views/layouts/_topbar.html.#{extname}", "app/views/layouts/_topbar.html.#{extname}"
  get "https://raw.github.com/aleksandrov1988/rails3-application-templates/master/files/views/layouts/_messages.html.#{extname}", "app/views/layouts/_messages.html.#{extname}"

  remove_file 'public/favicon.ico'
  get 'https://raw.github.com/aleksandrov1988/rails3-application-templates/master/files/images/favicon.ico', 'public/favicon.ico'
  get 'https://raw.github.com/aleksandrov1988/rails3-application-templates/master/files/images/logo.png', 'app/assets/images/logo.png'
  get 'https://raw.github.com/aleksandrov1988/rails3-application-templates/master/files/assets/stylesheets/basic.css', 'app/assets/stylesheets/basic.css'

  ###CAS
  get 'https://raw.github.com/aleksandrov1988/rails3-application-templates/master/files/config/initializers/cas.rb', 'config/initializers/cas.rb'
  remove_file 'app/controllers/application_controller.rb'
  get 'https://raw.github.com/aleksandrov1988/rails3-application-templates/master/files/controllers/application_controller.rb', 'app/controllers/application_controller.rb'


  ###HOME PAGE
  say_wizard "Generate Home Page"

  remove_file 'public/index.html'
  remove_file 'public/rails.png'

  generate(:controller, "home index")

  remove_file "app/views/home/index.html.#{extname}"
  create_file "app/views/home/index.html.#{extname}" do
    if config['haml']
      "%h3 Home"
    else
      "<h3>Home</h3>"
    end
  end
  gsub_file 'config/routes.rb', /get \"home\/index\"/, 'root :to => "home#index"'


  ###LOCALE
  gsub_file 'config/application.rb', /# config.time_zone = 'Central Time \(US & Canada\)'/, '  config.time_zone = "Moscow"'
  create_file 'config/locales/ru.yml' do
    <<-'YML'
  ru:
    activerecord:
      models:
      attributes:
    YML
  end
end

after_everything do

  ###LOGINS
  unless logins.blank?
    generate 'model User login'
    rake 'db:migrate'
    rake 'db:seed'
  end

  ###GIT
  say_wizard "Git initialize"
  append_file '.gitignore', '/.idea'
  append_file '.gitignore', '/.redcar'
  append_file '.gitignore', '/.nbproject'

  git :init
  git :add => '.'
  git :commit => "-aqm 'new Rails app generated by Rails Apps Composer gem'"
end





@current_recipe = nil

# >-----------------------------[ Run Bundler ]-------------------------------<

say_wizard "Running 'bundle install'. This will take a while."
run 'bundle install'
run 'bundle update'
say_wizard "Running 'after bundler' callbacks."
require 'bundler/setup'
@after_blocks.each{|b| config = @configs[b[0]] || {}; @current_recipe = b[0]; b[1].call}

@current_recipe = nil
say_wizard "Running 'after everything' callbacks."
@after_everything_blocks.each{|b| config = @configs[b[0]] || {}; @current_recipe = b[0]; b[1].call}

@current_recipe = nil
say_wizard "Finished running the rails_apps_composer app template."
say_wizard "Your new Rails app is ready."
